package loginrules;

import com.bsep_sbz.SIEMCenter.model.sbz.log.Alarm;
import com.bsep_sbz.SIEMCenter.model.sbz.log.Log;
import com.bsep_sbz.SIEMCenter.model.sbz.enums.log.LogCategory;
import com.bsep_sbz.SIEMCenter.model.sbz.enums.log.LogLevel;
import com.bsep_sbz.SIEMCenter.model.sbz.enums.log.AlarmProducerType;
import java.util.HashMap;
import java.util.ArrayList;


global java.util.ArrayList<String> maliciousIpAddresses;

query "Get all alarms"
    $a: Alarm()
end

query "Get logs by type" (String $type)
    $l: Log(eval(type.name().contains($type)))
end

query "Get logs by category" (String $category)
    $l: Log(eval(category.name().contains($category)))
end

query "Get logs by source" (String $source)
    $l: Log(eval(source.contains($source)))
end

query "Get logs by host_address" (String $hostAddress)
    $l: Log(eval(hostAddress.contains($hostAddress)))
end

query "Get logs by message" (String $message)
    $l: Log(eval(message.contains($message)))
end

declare window LoginAttempts
    @doc("last 24h login attempts")
    Log() over window:time( 24h )
end

declare window Attack
    @doc("50 requests in 60sec")
    Log() over window:time( 60s )
end

// Prijava ili pokušaj prijave sa IP adrese koje se nalazi na spisku malicioznih IP adresa
rule "Try to login from malicious ip address"
    salience 2
    when
        $l: Log(type == LogLevel.WARN, category == LogCategory.LOGIN, maliciousIpAddresses contains source)
    then
        System.out.println("malicious ip address");
        Alarm alarm = new Alarm();
        alarm.setAlarmProducerType(AlarmProducerType.LOGIN);
        alarm.getLogs().add($l);
        alarm.setMessage("Try to login from malicious ip address");
        insert(alarm);
end

// Pojava loga u kojoj se nalazi IP adresa sa spiska malicioznih IP adresa
rule "Pojava loga u kojoj se nalazi IP adresa sa spiska malicioznih IP adresa"
    salience 1
    when
        $l: Log(maliciousIpAddresses contains source)
    then

        Alarm alarm = new Alarm();
        alarm.setAlarmProducerType(AlarmProducerType.APP);
        alarm.getLogs().add($l);
        alarm.setMessage("Pojava loga u kojoj se nalazi IP adresa sa spiska malicioznih IP adresa");
        insert(alarm);
end


// mradovic: this rule will be triggered as many times as number of logs with given specs ???
// Ukoliko sa iste IP adrese registruje 30 ili više neuspešnih pokušaja prijave na
// sistem u roku od 24h, dodati tu IP adresu u spisak malicioznih IP adresa
rule "30+ login attempts within 24h with same ip" // in this case source is ip address
    when
        $log: Log($s: source, category == LogCategory.LOGIN, message.contains("login_successful:false"),
        source not memberOf maliciousIpAddresses) not
        Log(source == $s, category == LogCategory.LOGIN, message.contains("login_successful:false"),
                source not memberOf maliciousIpAddresses, this after $log) and
        Number(intValue >= 30) from accumulate(
                       $l: Log(
                           source == $s,
                           category == LogCategory.LOGIN,
                           message.contains("login_successful:false")
                       ) from window LoginAttempts,
                       count($l)
                   )
    then
        maliciousIpAddresses.add($log.getSource());
        drools.getKnowledgeRuntime().setGlobal("maliciousIpAddresses", maliciousIpAddresses);
        Alarm alarm = new Alarm();
        alarm.setMessage("30+ login attempts within 24h with same ip");
        alarm.getLogs().add($log);
        insert(alarm);
        System.out.println("30+ login attempts within 24h with same ip");
end

rule "Payment system attack" // in this case source is ip address
    when
        $log: Log($id: id, $s: source, $h: hostAddress, category == LogCategory.PAYMENT_SYSTEM) not
        Log(source == $s, hostAddress == $h, category == LogCategory.PAYMENT_SYSTEM, this after $log)  and
        Number(intValue >= 50) from accumulate(
                       $l: Log(
                           source == $s,
                           hostAddress == $h,
                           category == LogCategory.PAYMENT_SYSTEM
                       ) from window Attack,
                       count($l)
                   )
    then
        Alarm alarm = new Alarm();
        alarm.setMessage("Payment system attack");
        alarm.getLogs().add($log);
        insert(alarm);
        System.out.println("Payment system attack");
end