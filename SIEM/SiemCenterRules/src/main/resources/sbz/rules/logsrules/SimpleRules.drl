package logsrules;
import com.bsep_sbz.SIEMCenter.model.sbz.log.Log;
import com.bsep_sbz.SIEMCenter.model.sbz.enums.log.LogLevel
import com.bsep_sbz.SIEMCenter.model.sbz.log.Alarm;
import com.bsep_sbz.SIEMCenter.model.sbz.enums.log.AlarmProducerType;

// Pojava loga ƒçiji tip je ERROR
rule "Log with ERROR"
    when
        $l: Log(type == LogLevel.ERROR)
    then
        System.out.println("log with error");
        Alarm alarm = new Alarm();
        alarm.setAlarmProducerType(AlarmProducerType.APP);
        alarm.getLogs().add($l);
        alarm.setMessage("Log with ERROR");
        insert(alarm);
end

rule "Reset alarm"
    agenda-group "alarm"
    when
        $a: Alarm(isRetrievedFromSession == false)
    then
        modify($a){setIsRetrievedFromSession(true)}
end

query "Get all alarms"
    $a: Alarm(isRetrievedFromSession == false)
end

query "Get logs by type" (String $type)
    $l: Log(eval(type.name().contains($type)))
end

query "Get logs by category" (String $category)
    $l: Log(eval(category.name().contains($category)))
end

query "Get logs by source" (String $source)
    $l: Log(eval(source.contains($source)))
end

query "Get logs by host_address" (String $hostAddress)
    $l: Log(eval(hostAddress.contains($hostAddress)))
end

query "Get logs by message" (String $message)
    $l: Log(eval(message.contains($message)))
end